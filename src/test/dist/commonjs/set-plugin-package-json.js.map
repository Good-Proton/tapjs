{"version":3,"file":"set-plugin-package-json.js","sourceRoot":"","sources":["../../src/set-plugin-package-json.ts"],"names":[],"mappings":";;;AAAA,2BAAwD;AACxD,+BAA8B;AAE9B,MAAM,MAAM,GAAG,CAAC,SAAiB,EAAE,EAAE;IACnC,IAAI,CAAC;QACH,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAClB,IAAA,iBAAY,EAAC,IAAA,cAAO,EAAC,SAAS,EAAE,cAAc,CAAC,EAAE,MAAM,CAAC,CACzD,CAAA;QACD,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;IACjE,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,EAAE,CAAA;IACX,CAAC;AACH,CAAC,CAAA;AAED;;;;GAIG;AACI,MAAM,oBAAoB,GAAG,CAClC,SAAiB,EACjB,IAAY,EACZ,EAAE;IACF,MAAM,QAAQ,GAAG,IAAA,cAAO,EAAC,SAAS,EAAE,cAAc,CAAC,CAAA;IACnD,MAAM,GAAG,GAAG;QACV,eAAe,EAAE;YACf,aAAa,EAAE,UAAU,IAAI,EAAE;SAChC;KACF,CAAA;IACD,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAA;IACnC,IAAI,SAAS,CAAC,eAAe,EAAE,CAAC,aAAa,CAAC,KAAK,UAAU,IAAI,EAAE,EAAE,CAAC;QACpE,IAAA,WAAM,EAAC,IAAA,cAAO,EAAC,SAAS,EAAE,cAAc,CAAC,EAAE;YACzC,SAAS,EAAE,IAAI;YACf,KAAK,EAAE,IAAI;SACZ,CAAC,CAAA;QACF,IAAA,kBAAa,EACX,QAAQ,EACR,IAAI,CAAC,SAAS,CACZ;YACE,GAAG,GAAG;YACN,GAAG,SAAS;YACZ,eAAe,EAAE;gBACf,GAAG,SAAS,CAAC,eAAe;gBAC5B,GAAG,GAAG,CAAC,eAAe;aACvB;SACF,EACD,IAAI,EACJ,CAAC,CACF,GAAG,IAAI,CACT,CAAA;IACH,CAAC;AACH,CAAC,CAAA;AAhCY,QAAA,oBAAoB,wBAgChC","sourcesContent":["import { readFileSync, rmSync, writeFileSync } from 'fs'\r\nimport { resolve } from 'path'\r\n\r\nconst getPkg = (pluginDir: string) => {\r\n  try {\r\n    const p = JSON.parse(\r\n      readFileSync(resolve(pluginDir, 'package.json'), 'utf8'),\r\n    )\r\n    return !p || typeof p !== 'object' || Array.isArray(p) ? {} : p\r\n  } catch {\r\n    return {}\r\n  }\r\n}\r\n\r\n/**\r\n * call wth the pluginDir and the path to @tapjs/core\r\n * and it'll make sure that the plugin dir has a package.json\r\n * that depends on the symlink we're about to create.\r\n */\r\nexport const setPluginPackageJson = (\r\n  pluginDir: string,\r\n  core: string,\r\n) => {\r\n  const pluginPJ = resolve(pluginDir, 'package.json')\r\n  const pkg = {\r\n    devDependencies: {\r\n      '@tapjs/core': `file://${core}`,\r\n    },\r\n  }\r\n  const pluginPkg = getPkg(pluginDir)\r\n  if (pluginPkg.devDependencies?.['@tapjs/core'] !== `file://${core}`) {\r\n    rmSync(resolve(pluginDir, 'package.json'), {\r\n      recursive: true,\r\n      force: true,\r\n    })\r\n    writeFileSync(\r\n      pluginPJ,\r\n      JSON.stringify(\r\n        {\r\n          ...pkg,\r\n          ...pluginPkg,\r\n          devDependencies: {\r\n            ...pluginPkg.devDependencies,\r\n            ...pkg.devDependencies,\r\n          },\r\n        },\r\n        null,\r\n        2,\r\n      ) + '\\n',\r\n    )\r\n  }\r\n}\r\n"]}