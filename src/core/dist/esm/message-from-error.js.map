{"version":3,"file":"message-from-error.js","sourceRoot":"","sources":["../../src/message-from-error.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAAW,EAAU,EAAE;IACtD,IAAI,OAAO,EAAE,KAAK,QAAQ;QAAE,OAAO,EAAE,CAAA;IACrC,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA;QAChD,IAAI,KAAK,IAAI,OAAO,KAAK,IAAI,QAAQ;YAAE,OAAO,KAAK,CAAA;QACnD,MAAM,EAAE,GAAG,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;QAC9D,MAAM,MAAM,GACV,EAAE,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;QAC7D,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ;YAAE,OAAO,OAAO,CAAA;QAC1D,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC;YAC9C,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACtC,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7B,OAAO,CACL,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC;gBACvD,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;oBACnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC/B,CAAC,CAAC,IAAI,CACP,CAAA;QACH,CAAC;IACH,CAAC;IACD,OAAO,iBAAiB,CAAA;AAC1B,CAAC,CAAA;AAYD,MAAM,WAAW,GAAG,CAAC,EAAW,EAAmB,EAAE,CACnD,CAAC,CAAC,EAAE;IACJ,OAAO,EAAE,KAAK,QAAQ;IACtB,CAAC,EAAE,YAAY,KAAK;QAClB,OAAQ,EAAgB,CAAC,KAAK,KAAK,WAAW;QAC9C,OAAQ,EAAgB,CAAC,IAAI,KAAK,WAAW;QAC7C,OAAQ,EAAgB,CAAC,OAAO,KAAK,WAAW;QAChD,OAAQ,EAAgB,CAAC,KAAK,KAAK,WAAW,CAAC;IACjD,CAAE,EAAgB,CAAC,IAAI,KAAK,SAAS;QACnC,OAAQ,EAAgB,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAA","sourcesContent":["/**\r\n * get the appropriate failure message from an error object to print\r\n * in a `not ok` test point when unhandled throws or rejections happen.\r\n */\r\nexport const messageFromError = (er: unknown): string => {\r\n  if (typeof er === 'string') return er\r\n  if (isErrorLike(er)) {\r\n    const { name, message, stack, error, code } = er\r\n    if (error && typeof error == 'string') return error\r\n    const nc = name && typeof name === 'string' ? `${name}: ` : ''\r\n    const ncCode =\r\n      nc && typeof code === 'string' ? `${name} [${code}]: ` : ''\r\n    if (message && typeof message === 'string') return message\r\n    if (typeof stack === 'string' && stack.trim()) {\r\n      const lines = stack.trim().split('\\n')\r\n      const line = String(lines[0])\r\n      return (\r\n        name && line.startsWith(nc) ? line.substring(nc.length)\r\n        : ncCode && line.startsWith(ncCode) ?\r\n          line.substring(ncCode.length)\r\n        : line\r\n      )\r\n    }\r\n  }\r\n  return 'unhandled error'\r\n}\r\n\r\ntype ErrorLike =\r\n  | (Error & { error?: any; code?: string })\r\n  | {\r\n      error?: any\r\n      name?: string\r\n      message?: string\r\n      stack?: any\r\n      code?: string\r\n    }\r\n\r\nconst isErrorLike = (er: unknown): er is ErrorLike =>\r\n  !!er &&\r\n  typeof er === 'object' &&\r\n  (er instanceof Error ||\r\n    typeof (er as ErrorLike).error !== 'undefined' ||\r\n    typeof (er as ErrorLike).name !== 'undefined' ||\r\n    typeof (er as ErrorLike).message !== 'undefined' ||\r\n    typeof (er as ErrorLike).stack !== 'undefined') &&\r\n  ((er as ErrorLike).code === undefined ||\r\n    typeof (er as ErrorLike).code === 'string')\r\n"]}