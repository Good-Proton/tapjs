{"version":3,"file":"stdin.js","sourceRoot":"","sources":["../../src/stdin.ts"],"names":[],"mappings":";;;AAEA,+CAAuC;AAYvC;;;;;;GAMG;AACH,MAAa,KAAM,SAAQ,qBAAO;IAChC,UAAU,GAAW,YAAY,CAAA;IACjC,QAAQ,GAAW,OAAO,CAAA;IAM1B,YAAY,OAAkB;QAC5B,KAAK,CAAC;YACJ,SAAS,EAAE,OAAO,CAAC,KAAK;YACxB,IAAI,EAAE,YAAY;YAClB,GAAG,OAAO;YACV,QAAQ,EAAE,YAAY;SACvB,CAAC,CAAA;IACJ,CAAC;CACF;AAhBD,sBAgBC","sourcesContent":["import { Minipass } from 'minipass'\r\nimport { BaseOpts } from './base.js'\r\nimport { TapFile } from './tap-file.js'\r\n\r\n/**\r\n * Options that may be provided to the {@link @tapjs/core!stdin.Stdin} class\r\n */\r\nexport interface StdinOpts extends BaseOpts {\r\n  tapStream?:\r\n    | NodeJS.ReadableStream\r\n    | Minipass<Buffer>\r\n    | Minipass<string>\r\n}\r\n\r\n/**\r\n * Class representing standard input as a TAP stream\r\n *\r\n * Instantiated by `t.stdin()`, typically.\r\n *\r\n * @internal\r\n */\r\nexport class Stdin extends TapFile {\r\n  caughtName: string = 'stdinError'\r\n  emitName: string = 'stdin'\r\n  declare filename: '/dev/stdin'\r\n  declare tapStream:\r\n    | NodeJS.ReadableStream\r\n    | Minipass<Buffer>\r\n    | Minipass<string>\r\n  constructor(options: StdinOpts) {\r\n    super({\r\n      tapStream: process.stdin,\r\n      name: '/dev/stdin',\r\n      ...options,\r\n      filename: '/dev/stdin',\r\n    })\r\n  }\r\n}\r\n"]}