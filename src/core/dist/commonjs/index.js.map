{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;;;;;;;;;;;;;AAIH,gDAA6B;AAC7B,4CAAyB;AACzB,8CAA2B;AAC3B,wDAAqC;AACrC,6CAA0B;AAC1B,mDAAgC;AAChC,+CAA4B;AAC5B,+DAA4C;AAC5C,uDAAoC;AACpC,4CAAyB;AACzB,6CAA0B;AAC1B,6CAA0B;AAC1B,+CAA4B;AAC5B,iDAA8B;AAC9B,kDAA+B;AAC/B,8CAA2B;AAC3B,8CAA2B;AAO3B,qCAAmC;AAF1B,oFAEA,YAAG,OAFA","sourcesContent":["/**\r\n * Main export of the `@tapjs/core` module, providing the bulk of\r\n * the internal machinery of tests.\r\n *\r\n * @module\r\n */\r\n\r\nimport { CallSiteLike, CallSiteLikeJSON } from '@tapjs/stack'\r\n\r\nexport * from './tap-file.js'\r\nexport * from './base.js'\r\nexport * from './counts.js'\r\nexport * from './extra-from-error.js'\r\nexport * from './lists.js'\r\nexport * from './main-script.js'\r\nexport * from './minimal.js'\r\nexport * from './normalize-message-extra.js'\r\nexport * from './parse-test-args.js'\r\nexport * from './proc.js'\r\nexport * from './spawn.js'\r\nexport * from './stdin.js'\r\nexport * from './tap-dir.js'\r\nexport * from './test-base.js'\r\nexport * from './test-point.js'\r\nexport * from './waiter.js'\r\nexport * from './worker.js'\r\n// do it in this weird way to keep prettier from moving tap.js\r\n// ahead of test-base.js. We need TestBase to be loaded\r\n// and exported *before* tap, because TAP loades @tapjs/test, which\r\n// extends TestBase.\r\nexport { tap, TAP }\r\n\r\nimport { tap, TAP } from './tap.js'\r\nimport type { TestBase, TestBaseOpts } from './test-base.js'\r\n\r\n/**\r\n * The `plugin` export from any tap plugin\r\n *\r\n * @template B - the return value of the plugin\r\n * @template O - test options added by this plugin\r\n */\r\nexport type TapPlugin<\r\n  B extends Object,\r\n  O extends TestBaseOpts | any = unknown,\r\n> =\r\n  unknown extends O ? (t: TestBase) => B : (t: TestBase, opts: O) => B\r\n\r\n/**\r\n * The extra info passed to assertions.\r\n *\r\n * Extended by BaseOpts, TestBaseOpts, and ultimately TestOpts, since any\r\n * subtest is also an assertion, and can take all the same assertion options.\r\n */\r\nexport interface Extra {\r\n  bail?: boolean\r\n  todo?: string | boolean\r\n  skip?: string | boolean\r\n  at?: CallSiteLike | CallSiteLikeJSON | null\r\n  stack?: string\r\n  source?: string\r\n  errorOrigin?: {\r\n    at?: CallSiteLike | CallSiteLikeJSON | null\r\n    stack?: string\r\n    source?: string\r\n  }\r\n  found?: any\r\n  wanted?: any\r\n  doNotWant?: any\r\n  pattern?: any\r\n  diff?: string\r\n  message?: string\r\n  expired?: string\r\n  // error properties\r\n  type?: string\r\n  error?: any\r\n  diagnostic?: boolean\r\n  tapChildBuffer?: string\r\n  test?: string\r\n  [k: string]: any\r\n}\r\n\r\n/**\r\n * The optional `..., message, extra)` arguments passed to\r\n * test assertions.\r\n */\r\nexport type MessageExtra = [] | [string] | [Extra] | [string, Extra]\r\n"]}