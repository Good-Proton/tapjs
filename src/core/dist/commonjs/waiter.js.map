{"version":3,"file":"waiter.js","sourceRoot":"","sources":["../../src/waiter.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;GASG;AACH,MAAa,MAAM;IACjB;;OAEG;IACH,EAAE,CAA6B;IAC/B;;OAEG;IACH,KAAK,GAAY,KAAK,CAAA;IACtB;;OAEG;IACH,KAAK,GAAQ,SAAS,CAAA;IACtB;;OAEG;IACH,QAAQ,GAAY,KAAK,CAAA;IACzB;;OAEG;IACH,QAAQ,GAAY,KAAK,CAAA;IACzB;;OAEG;IACH,IAAI,GAAY,KAAK,CAAA;IACrB,SAAS,GAAY,KAAK,CAAA;IAC1B,YAAY,CAAS;IACrB,OAAO,CAAe;IACtB,OAAO,GAAmC,IAAI,CAAA;IAE9C,YACE,OAA4B,EAC5B,EAAsB,EACtB,eAAwB,KAAK;QAE7B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;QACZ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAA;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAO,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,CAAA;QAC7D,OAAO;aACJ,IAAI,CAAC,KAAK,CAAC,EAAE;YACZ,0DAA0D;YAC1D,qBAAqB;YACrB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;gBACd,OAAM;YACR,CAAC;YACD,oBAAoB;YAEpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;YACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;YAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;YAChB,IAAI,CAAC,MAAM,EAAE,CAAA;QACf,CAAC,CAAC;aACD,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;IACjC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,EAAO;QACZ,0DAA0D;QAC1D,qBAAqB;QACrB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,OAAM;QACR,CAAC;QACD,oBAAoB;QAEpB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;QACf,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,MAAM,EAAE,CAAA;IACf,CAAC;IAED,oCAAoC;IACpC;;;OAGG;IACH,KAAK,CAAC,EAAS;QACb,qBAAqB;QACrB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,OAAM;QACR,CAAC;QACD,oBAAoB;QAEpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;QACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAA;QACf,gDAAgD;QAChD,sCAAsC;QACtC,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,YAAY,CAAA;QAClC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAA;IACtB,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;YAC/C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;YACrB,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAA;YACf,IAAI,CAAC,OAAO,EAAE,EAAE,CAAA;QAClB,CAAC;IACH,CAAC;CACF;AAzGD,wBAyGC","sourcesContent":["/**\r\n * Basically a fancy Deferred, wrapped around an existing promise, used by\r\n * the {@link @tapjs/core!test-base.TestBase#waitOn} method, and\r\n * tracked in the {@link @tapjs/core!test-base.TestBase#queue}.\r\n *\r\n * The callback function is called when it's been either resolved or\r\n * rejected. The Waiter internal promise is resolved if the wrapped\r\n * promise matches our expectation. The value member is the resolved\r\n * value or rejection error.\r\n */\r\nexport class Waiter {\r\n  /**\r\n   * Callback to call when the promise resolves, or null if not provided\r\n   */\r\n  cb: null | ((w: Waiter) => any)\r\n  /**\r\n   * whether or not this waiter is ready to process\r\n   */\r\n  ready: boolean = false\r\n  /**\r\n   * The resolved value, or the error that was raised on rejection\r\n   */\r\n  value: any = undefined\r\n  /**\r\n   * True if the promise resolved successfully\r\n   */\r\n  resolved: boolean = false\r\n  /**\r\n   * True if the promise rejected\r\n   */\r\n  rejected: boolean = false\r\n  /**\r\n   * Set when the Waiter's promise has either resolved or rejected\r\n   */\r\n  done: boolean = false\r\n  finishing: boolean = false\r\n  expectReject: boolean\r\n  promise: Promise<void>\r\n  resolve: null | ((value?: any) => void) = null\r\n\r\n  constructor(\r\n    promise: Promise<any | void>,\r\n    cb: (w: Waiter) => any,\r\n    expectReject: boolean = false,\r\n  ) {\r\n    this.cb = cb\r\n    this.expectReject = !!expectReject\r\n    this.promise = new Promise<void>(res => (this.resolve = res))\r\n    promise\r\n      .then(value => {\r\n        // promises should always resolve/reject at most one time.\r\n        /* c8 ignore start */\r\n        if (this.done) {\r\n          return\r\n        }\r\n        /* c8 ignore stop */\r\n\r\n        this.resolved = true\r\n        this.value = value\r\n        this.done = true\r\n        this.finish()\r\n      })\r\n      .catch(er => this.reject(er))\r\n  }\r\n\r\n  /**\r\n   * called when the promise rejects\r\n   */\r\n  reject(er: any) {\r\n    // promises should always resolve/reject at most one time.\r\n    /* c8 ignore start */\r\n    if (this.done) {\r\n      return\r\n    }\r\n    /* c8 ignore stop */\r\n\r\n    this.value = er\r\n    this.rejected = true\r\n    this.done = true\r\n    this.finish()\r\n  }\r\n\r\n  // TODO: consider AbortSignal maybe?\r\n  /**\r\n   * Tell the waiter to abandon the promise and stop waiting.\r\n   * Called when tests time out or bail out.\r\n   */\r\n  abort(er: Error) {\r\n    /* c8 ignore start */\r\n    if (this.done) {\r\n      return\r\n    }\r\n    /* c8 ignore stop */\r\n\r\n    this.ready = true\r\n    this.finishing = false\r\n    this.done = true\r\n    this.value = er\r\n    // make it clear that this is a problem by doing\r\n    // the opposite of what was requested.\r\n    this.rejected = !this.expectReject\r\n    return this.finish()\r\n  }\r\n\r\n  /**\r\n   * Called when the waiter is ready, and processed by its owning\r\n   * {@link @tapjs/core!test-base.TestBase}\r\n   */\r\n  finish() {\r\n    if (this.ready && this.done && !this.finishing) {\r\n      this.finishing = true\r\n      this.cb?.(this)\r\n      this.resolve?.()\r\n    }\r\n  }\r\n}\r\n"]}