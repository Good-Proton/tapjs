{"version":3,"file":"extra-from-error.js","sourceRoot":"","sources":["../../src/extra-from-error.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oDAAqC;AAIrC,gEAAgE;AAChE,MAAM,MAAM,GAAG,CAAC,EAA4B,EAAE,EAAE,CAC9C,CAAC,CAAC,EAAE,EAAE,QAAQ;IACd,OAAO,EAAE,CAAC,UAAU,KAAK,QAAQ;IACjC,OAAO,EAAE,CAAC,YAAY,KAAK,QAAQ,CAAA;AAErC;;GAEG;AACI,MAAM,cAAc,GAAG,CAC5B,EAAO,EACP,KAAa,EACb,OAAkB,EAClB,EAAE;IACF,oDAAoD;IACpD,0DAA0D;IAC1D,2CAA2C;IAC3C,IACE,CAAC,CAAC,EAAE;QACJ,OAAO,EAAE,KAAK,QAAQ;QACtB,EAAE,CAAC,MAAM;QACT,OAAO,EAAE,CAAC,MAAM,KAAK,QAAQ;QAC7B,EAAE,CAAC,MAAM,CAAC,OAAO,EACjB,CAAC;QACD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,EAAE,GAAG,EAAE,CAAC,MAAM,CAAA;QACxC,EAAE,CAAC,MAAM,GAAG,MAAM,CAAA;IACpB,CAAC;IAED,iEAAiE;IACjE,8DAA8D;IAC9D,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;IACvB,KAAK,GAAG,MAAM,CAAC,MAAM,CACnB,KAAK,IAAI,EAAE,EACX,MAAM,CAAC,WAAW,CAChB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAC5B,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CACvD,CACF,CACF,CAAA;IAED,IAAI,CAAC,EAAE,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE,CAAC;QAClC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAA;QAChB,OAAO,KAAK,CAAA;IACd,CAAC;IAED,MAAM,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;IACjC,IAAI,EAAE,IAAI,EAAE,CAAC,MAAM,EAAE,CAAC;QACpB,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC/C,IAAI,EAA4B,CAAA;QAChC,mEAAmE;QACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACnC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAClB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;gBACV,MAAK;YACP,CAAC;QACH,CAAC;QACD,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;IACxB,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QACxC,IAAI,EAAE,YAAY,KAAK,EAAE,CAAC;YACxB,kEAAkE;YAClE,oEAAoE;YACpE,kEAAkE;YAClE,wEAAwE;YACxE,6CAA6C;YAC7C,KAAK,CAAC,KAAK,GAAG,EAAE,CAAA;QAClB,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAA;QACxB,CAAC;QACD,KAAK,CAAC,EAAE,GAAG,IAAI,CAAA;IACjB,CAAC;IAED,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QACnC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAA;IACtB,CAAC;IAED,6BAA6B;IAC7B,MAAM,EACJ,OAAO,EAAE,CAAC,EACV,KAAK,EAAE,EAAE,EACT,IAAI,EAAE,GAAG,EACT,KAAK,EACL,MAAM,EACN,GAAG,KAAK,EACT,GAAG,EAAE,CAAA;IACN,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IAC3B,IAAI,KAAK,KAAK,SAAS;QAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAA;IAC5C,IAAI,MAAM,KAAK,SAAS;QAAE,KAAK,CAAC,MAAM,GAAG,MAAM,CAAA;IAE/C,OAAO,KAAK,CAAA;AACd,CAAC,CAAA;AAhFY,QAAA,cAAc,kBAgF1B","sourcesContent":["import type { CallSiteLike } from '@tapjs/stack'\r\nimport * as stack from '@tapjs/stack'\r\nimport type { BaseOpts } from './base.js'\r\nimport { Extra } from './index.js'\r\n\r\n// test that a CallSiteLike is \"useful\", ie, has a file/line/col\r\nconst useful = (at: CallSiteLike | undefined) =>\r\n  !!at?.fileName &&\r\n  typeof at.lineNumber === 'number' &&\r\n  typeof at.columnNumber === 'number'\r\n\r\n/**\r\n * Create an {@link @tapjs/core!index.Extra} object based on a thrown Error\r\n */\r\nexport const extraFromError = (\r\n  er: any,\r\n  extra?: Extra,\r\n  options?: BaseOpts,\r\n) => {\r\n  // the yaml module puts big stuff here, pluck it off\r\n  // otherwise it's quite noisy when we throw as a result of\r\n  // trying to parse invalid tap diagnostics.\r\n  if (\r\n    !!er &&\r\n    typeof er === 'object' &&\r\n    er.source &&\r\n    typeof er.source === 'object' &&\r\n    er.source.context\r\n  ) {\r\n    const { context, ...source } = er.source\r\n    er.source = source\r\n  }\r\n\r\n  // pull out all fields from options, other than anything starting\r\n  // with tapChild, or anything already set in the extra object.\r\n  options = options ?? {}\r\n  extra = Object.assign(\r\n    extra ?? {},\r\n    Object.fromEntries(\r\n      Object.entries(options).filter(\r\n        ([k]) => !/^tapChild/.test(k) && !(k in (extra ?? {})),\r\n      ),\r\n    ),\r\n  )\r\n\r\n  if (!er || typeof er !== 'object') {\r\n    extra.error = er\r\n    return extra\r\n  }\r\n\r\n  const st = stack.captureError(er)\r\n  if (st && st.length) {\r\n    extra.stack = st.map(c => String(c)).join('\\n')\r\n    let at: CallSiteLike | undefined\r\n    // walk down the stack until we find the first \"useful\" stack frame\r\n    for (let i = 0; i < st.length; i++) {\r\n      if (useful(st[i])) {\r\n        at = st[i]\r\n        break\r\n      }\r\n    }\r\n    extra.at = at || st[0]\r\n  } else if (typeof er.stack === 'string') {\r\n    if (er instanceof Error) {\r\n      // if we failed to capture it, but it has a stack, then that means\r\n      // that all of the stack frames were internal, because the error was\r\n      // generated from native code in a dep that tap ignores (or if not\r\n      // native code, then something else that escaped the async-hook-domain).\r\n      // A common cause of this is import() errors.\r\n      extra.stack = ''\r\n    } else {\r\n      extra.stack = er.stack\r\n    }\r\n    extra.at = null\r\n  }\r\n\r\n  if (er.name && er.name !== 'Error') {\r\n    extra.type = er.name\r\n  }\r\n\r\n  // grab any other rando props\r\n  const {\r\n    message: _,\r\n    stack: __,\r\n    name: ___,\r\n    cause,\r\n    errors,\r\n    ...props\r\n  } = er\r\n  Object.assign(extra, props)\r\n  if (cause !== undefined) extra.cause = cause\r\n  if (errors !== undefined) extra.errors = errors\r\n\r\n  return extra\r\n}\r\n"]}