{"version":3,"file":"spawn.js","sourceRoot":"","sources":["../../src/spawn.ts"],"names":[],"mappings":";;;AAAA,uCAA+C;AAE/C,oDAAgE;AAQhE,yCAAoC;AAEpC,yCAAkC;AAGlC,6DAAoD;AAWpD,MAAM,SAAS,GAAG,CAAC,CAAe,EAA+B,EAAE,CACjE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;AA8CZ;;;;;;GAMG;AACH,MAAa,KAAM,SAAQ,cAAiB;IAE1C,GAAG,CAAQ;IACX,OAAO,CAAQ;IACf,IAAI,CAAU;IACd,KAAK,CAKJ;IACD,GAAG,CAA6C;IAChD,IAAI,GAAwB,IAAI,CAAA;IAChC,EAAE,GAAwB,IAAI,CAAA;IAC9B,UAAU,CAAS;IAEnB,gEAAgE;IAChE,SAAS,GAAW,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAA;IAEzC,SAAS,CAAuB;IAEhC,QAAQ,CAAQ;IAChB,iBAAiB,GAAG,KAAK,CAAA;IAEzB,YAAY,OAAkB;QAC5B,6CAA6C;QAC7C,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;QAC/B,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAA;QAC1D,CAAC;QACD,MAAM,GAAG,GACP,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;QAC/D,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAA;QAE/B,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,EAAE,IAAI,CAAC,CAAA;QACjE,KAAK,CAAC,OAAO,CAAC,CAAA;QAEd,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;QACpC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YAClB,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACtC,IAAI,CAAC,KAAK,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;YAC5D,CAAC;iBAAM,CAAC;gBACN,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,GAAG,OAAO,CAAC,KAAK,CAAA;gBACxC,qBAAqB;gBACrB,IAAI,KAAK,KAAK,KAAK,IAAI,MAAM,KAAK,KAAK,EAAE,CAAC;oBACxC,MAAM,IAAI,KAAK,CACb,kDAAkD,CACnD,CAAA;gBACH,CAAC;gBACD,oBAAoB;gBACpB,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;YAC7C,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAA;QACpC,CAAC;QAED,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAA;QACtC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI,GAAG,CAAC,YAAY,IAAI,GAAG,CAAC,CAAA;QAClE,IAAI,CAAC,GAAG,GAAG;YACT,GAAG,GAAG;YACN,YAAY,EAAE,IAAI,CAAC,QAAQ;YAC3B,GAAG,EAAE,GAAG;YACR,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;YAC/B,aAAa,EAAE,IAAI,CAAC,SAAS;SAC9B,CAAA;IACH,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACzB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACtC,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAA;IAChB,CAAC;IAED,OAAO;QACL,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;YACZ,IAAI,CAAC,EAAE,EAAE,CAAA;QACX,CAAC;QACD,IAAI,CAAC,EAAE,GAAG,IAAI,CAAA;IAChB,CAAC;IAED,IAAI,CAAC,EAAc;QACjB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;QACZ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC,CAAA;QAE1C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;YAC5B,MAAM,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;YAChD,IAAI,OAAO,EAAE,CAAC;gBACZ,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;YAC9B,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAA;QACrD,MAAM,OAAO,GAAG;YACd,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC5B,CAAA;QACD,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;QAEhC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAA;QAChC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,yBAAW,CAAC,KAAK,CACzC,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,IAAI,EACT,OAAO,CACR,CAAC,CAAA;QACF,qBAAqB;QACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC,KAAK,CACf,qCAAqC,EACrC,IAAI,CAAC,OAAO,CACb,CAAA;QACH,CAAC;QACD,oBAAoB;QACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAE7B,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACvB,MAAM,CAAC,GAAG,GAKT,CAAA;YACD,IACE,CAAC,CAAC,GAAG;gBACL,OAAO,GAAG,KAAK,QAAQ;gBACvB,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,SAAS;gBACxB,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,EACzB,CAAC;gBACD,IAAI,CAAC,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;oBAC/B,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAA;gBAC/B,CAAC;gBACD,IAAI,CAAC,CAAC,MAAM,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;oBAC9C,2CAA2C;oBAC3C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC9B,MAAM,CAAC,GAAG,UAAU,CAAC,GAAG,EAAE;wBACxB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAA;wBACzC,IAAI,CAAC,MAAM,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;4BACtC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;wBACtB,CAAC;oBACH,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAA;oBACZ,IAAI,CAAC,CAAC,KAAK;wBAAE,CAAC,CAAC,KAAK,EAAE,CAAA;gBACxB,CAAC;gBACD,OAAM;YACR,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QACrD,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE;YAChC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QACjC,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA;QACtC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;IAC5B,CAAC;IAED,OAAO,CAAC,GAAG,IAAW;QACpB,MAAM,IAAI,GAAG,IAAA,kBAAM,EAAC,GAAG,IAAI,CAAC,CAAA;QAC5B,MAAM,OAAO,GACX,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,CAAA;QACzD,4DAA4D;QAC5D,gEAAgE;QAChE,kEAAkE;QAClE,oBAAoB;QACpB,qBAAqB;QACrB,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACxB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;YACnC,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;YAChC,CAAC;QACH,CAAC;aAAM,CAAC;YACN,oBAAoB;YACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAC5B,CAAC;IACH,CAAC;IAED,YAAY,CAAC,IAAmB,EAAE,MAAqB;QACrD,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAA;QACrD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAA;QACnD,IAAI,IAAI,CAAC,SAAS;YAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;QACjD,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;QAE7C,oDAAoD;QACpD,IACE,IAAI,CAAC,OAAO;YACZ,IAAI,CAAC,OAAO,CAAC,IAAI;YACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO;YACzB,CAAC,IAAI;YACL,CAAC,MAAM,EACP,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,IAAI;gBACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,IAAI,gBAAgB,CAAA;QACpD,CAAC;QAED,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,MAAM,KAAK,SAAS,CAAC,CAAC,EAAE,CAAC;YAC1E,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,KAAK,CAAA;YACzB,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,CAAA;QACxB,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAA;IACvB,CAAC;IAED,OAAO,CAAC,UAAgC,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE;QAC5D,oEAAoE;QACpE,IAAI,CAAC,SAAS,GAAG,OAAO,CAAA;QACxB,gEAAgE;QAChE,8DAA8D;QAC9D,gEAAgE;QAChE,4DAA4D;QAC5D,kEAAkE;QAClE,iEAAiE;QACjE,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAA;QACtB,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,CAAC;gBACH,IAAI,CAAC,IAAI,CACP;oBACE,QAAQ,EAAE,SAAS;oBACnB,GAAG,EAAE,IAAI,CAAC,SAAS;oBACnB,KAAK,EAAE,IAAI,CAAC,QAAQ;oBACpB,yDAAyD;oBACzD,0DAA0D;oBAC1D,2DAA2D;oBAC3D,kBAAkB;oBAClB,qBAAqB;iBACtB,EACD,GAAG,EAAE,GAAG,CAAC,CACV,CAAA;YACH,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC;YACX,oBAAoB;YAEpB,mEAAmE;YACnE,iEAAiE;YACjE,qBAAqB;YACrB,MAAM,CAAC,GAAG,UAAU,CAAC,GAAG,EAAE;gBACxB,iEAAiE;gBACjE,IAAI,CAAC;oBACH,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBACtB,CAAC;gBAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,GAAG,UAAU,CAAC,GAAG,EAAE;oBACxB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAA;oBACzC,IAAI,CAAC,MAAM,IAAI,QAAQ,KAAK,SAAS,EAAE,CAAC;wBACtC,6CAA6C;wBAC7C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;oBACtB,CAAC;gBACH,CAAC,EAAE,GAAG,CAAC,CAAA;gBACP,IAAI,CAAC,CAAC,KAAK;oBAAE,CAAC,CAAC,KAAK,EAAE,CAAA;gBACtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;YAC3C,CAAC,EAAE,GAAG,CAAC,CAAA;YACP,IAAI,CAAC,CAAC,KAAK;gBAAE,CAAC,CAAC,KAAK,EAAE,CAAA;YACtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;YACzC,oBAAoB;QACtB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,EAAO,EAAE,KAAa;QAC1B,OAAO,IAAA,kCAAa,EAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAA;IAC3D,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,GAAW,EAAE,OAAe,EAAE,IAAc;QAC1D,OAAO,CACL,OAAO,KAAK,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC5B,IAAA,oBAAQ,EAAC,OAAO,CAAC,QAAQ,CAAC;gBAC1B,GAAG;gBACH,IAAI;qBACD,GAAG,CAAC,CAAC,CAAC,EAAE,CACP,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;oBACpB,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;oBACtD,CAAC,CAAC,CAAC,CACN;qBACA,IAAI,CAAC,GAAG,CAAC;qBACT,IAAI,EAAE;YACT,CAAC,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA;IAC3D,CAAC;CACF;AAxRD,sBAwRC","sourcesContent":["import { Base, TapBaseEvents } from './base.js'\r\n\r\nimport { ProcessInfo, WithExternalID } from '@tapjs/processinfo'\r\nimport {\r\n  ChildProcess,\r\n  ChildProcessByStdio,\r\n  IOType,\r\n  SpawnOptions,\r\n  StdioOptions,\r\n} from 'node:child_process'\r\nimport { basename } from 'node:path'\r\nimport { Readable, Stream, Writable } from 'node:stream'\r\nimport { format } from 'node:util'\r\nimport { Extra } from './index.js'\r\nimport { TestBaseOpts } from './test-base.js'\r\nimport { throwToParser } from './throw-to-parser.js'\r\n\r\n/**\r\n * A child process that is known to have a stdout stream\r\n */\r\nexport type ChildProcessWithStdout = ChildProcessByStdio<\r\n  null | Writable,\r\n  Readable,\r\n  null | Readable\r\n>\r\n\r\nconst hasStdout = (p: ChildProcess): p is ChildProcessWithStdout =>\r\n  !!p.stdout\r\n\r\n/**\r\n * Events emitted by the {@link @tapjs/core!spawn.Spawn} class\r\n */\r\nexport interface SpawnEvents extends TapBaseEvents {\r\n  /**\r\n   * Emitted immediately before the child process is spawned. If the\r\n   * options are mutated, then the changes *will* take effect.\r\n   */\r\n  preprocess: [WithExternalID<SpawnOptions>]\r\n  /**\r\n   * Emitted immediately after the child process is spawned, providing\r\n   * the actual `ChildProcess` object as an argument\r\n   */\r\n  process: [ChildProcessWithStdout]\r\n}\r\n\r\n/**\r\n * Options that may be provided to the {@link @tapjs/core!spawn.Spawn} class\r\n */\r\nexport interface SpawnOpts extends TestBaseOpts {\r\n  cwd?: string\r\n  command?: string\r\n  args?: string[]\r\n  /**\r\n   * Passed to child_process.spawn's 'stdio' option\r\n   *\r\n   * No matter what is specified here, stdout is *always* set to 'pipe',\r\n   * and stdio[3] is *always* set to 'ipc', because TAP uses these internally\r\n   * to communicate test results and timeout, respectively.\r\n   *\r\n   * So, this is only to set the behavior of stdin and stderr.\r\n   */\r\n  stdio?: StdioOptions\r\n  env?: { [k: string]: string } | NodeJS.ProcessEnv\r\n  exitCode?: number | null\r\n  signal?: string | null\r\n  /**\r\n   * Used for tracking the test process for tap --changed etc\r\n   * Typically set to the test name. Unlikely that you should\r\n   * ever set this, outside of tap itself.\r\n   */\r\n  externalID?: string\r\n}\r\n\r\n/**\r\n * Class representing a spawned TAP process\r\n *\r\n * Instantiated by `t.spawn()`, typically.\r\n *\r\n * @internal\r\n */\r\nexport class Spawn extends Base<SpawnEvents> {\r\n  declare options: SpawnOpts\r\n  cwd: string\r\n  command: string\r\n  args: string[]\r\n  stdio: [\r\n    IOType | Stream | number | null | undefined,\r\n    'pipe',\r\n    IOType | Stream | number | null | undefined,\r\n    'ipc',\r\n  ]\r\n  env: { [k: string]: string } | NodeJS.ProcessEnv\r\n  proc: null | ChildProcess = null\r\n  cb: null | (() => void) = null\r\n  externalID?: string\r\n\r\n  // doesn't have to be cryptographically secure, just a gut check\r\n  #childKey: string = String(Math.random())\r\n\r\n  #timedOut?: { expired?: string }\r\n\r\n  #childId: string\r\n  #childAskedToKill = false\r\n\r\n  constructor(options: SpawnOpts) {\r\n    // figure out the name before calling super()\r\n    const command = options.command\r\n    if (!command) {\r\n      throw new TypeError('no command provided for t.spawn()')\r\n    }\r\n    const cwd =\r\n      typeof options.cwd === 'string' ? options.cwd : process.cwd()\r\n    const args = options.args || []\r\n\r\n    options.name = options.name || Spawn.procName(cwd, command, args)\r\n    super(options)\r\n\r\n    this.externalID = options.externalID\r\n    this.cwd = cwd\r\n    this.command = command\r\n    this.args = args\r\n    if (options.stdio) {\r\n      if (typeof options.stdio === 'string') {\r\n        this.stdio = [options.stdio, 'pipe', options.stdio, 'ipc']\r\n      } else {\r\n        const [stdin, _, stderr] = options.stdio\r\n        /* c8 ignore start */\r\n        if (stdin === 'ipc' || stderr === 'ipc') {\r\n          throw new Error(\r\n            'cannot spawn subtest with ipc in stdin or stderr',\r\n          )\r\n        }\r\n        /* c8 ignore stop */\r\n        this.stdio = [stdin, 'pipe', stderr, 'ipc']\r\n      }\r\n    } else {\r\n      this.stdio = [0, 'pipe', 2, 'ipc']\r\n    }\r\n\r\n    const env = options.env || process.env\r\n    this.#childId = String(options.childId || env.TAP_CHILD_ID || '0')\r\n    this.env = {\r\n      ...env,\r\n      TAP_CHILD_ID: this.#childId,\r\n      TAP: '1',\r\n      TAP_BAIL: this.bail ? '1' : '0',\r\n      TAP_CHILD_KEY: this.#childKey,\r\n    }\r\n  }\r\n\r\n  endAll() {\r\n    if (this.proc) {\r\n      this.#childAskedToKill = false;\r\n      this.proc.kill('SIGKILL')\r\n      this.parser.abort('test unfinished')\r\n    }\r\n    this.#callCb()\r\n  }\r\n\r\n  #callCb() {\r\n    if (this.cb) {\r\n      this.cb()\r\n    }\r\n    this.cb = null\r\n  }\r\n\r\n  main(cb: () => void) {\r\n    this.cb = cb\r\n    this.setTimeout(this.options.timeout || 0)\r\n\r\n    this.parser.on('comment', c => {\r\n      const tomatch = c.match(/# timeout=([0-9]+)\\n$/)\r\n      if (tomatch) {\r\n        this.setTimeout(+tomatch[1])\r\n      }\r\n    })\r\n\r\n    this.env.TAP_JOB_ID = String(this.options.jobId || 0)\r\n    const options = {\r\n      cwd: this.cwd,\r\n      env: this.env,\r\n      stdio: this.stdio,\r\n      externalID: this.externalID,\r\n    }\r\n    this.parent?.emit('spawn', this)\r\n\r\n    this.emit('preprocess', options)\r\n    const proc = (this.proc = ProcessInfo.spawn(\r\n      this.command,\r\n      this.args,\r\n      options,\r\n    ))\r\n    /* c8 ignore start */\r\n    if (!hasStdout(proc)) {\r\n      return this.threw(\r\n        'failed to open child process stdout',\r\n        this.options,\r\n      )\r\n    }\r\n    /* c8 ignore stop */\r\n    proc.stdout.pipe(this.parser)\r\n\r\n    proc.on('message', msg => {\r\n      const m = msg as {\r\n        key: string\r\n        child: string\r\n        setTimeout?: number\r\n        killMe?: number\r\n      }\r\n      if (\r\n        !!msg &&\r\n        typeof msg === 'object' &&\r\n        m.key === this.#childKey &&\r\n        m.child === this.#childId\r\n      ) {\r\n        if (m.setTimeout !== undefined) {\r\n          this.setTimeout(m.setTimeout)\r\n        }\r\n        if (m.killMe !== undefined && !this.#timedOut) {\r\n          // child is done and asks to ensure killing\r\n          this.#childAskedToKill = true;\r\n          const t = setTimeout(() => {\r\n            const { signal, exitCode } = this.options\r\n            if (!signal && exitCode === undefined) {\r\n              proc.kill('SIGKILL')\r\n            }\r\n          }, m.killMe)\r\n          if (t.unref) t.unref()\r\n        }\r\n        return\r\n      }\r\n      this.comment(...(Array.isArray(msg) ? msg : [msg]))\r\n    })\r\n\r\n    proc.on('close', (code, signal) => {\r\n      this.#onprocclose(code, signal)\r\n    })\r\n    proc.on('error', er => this.threw(er))\r\n    this.emit('process', proc)\r\n  }\r\n\r\n  comment(...args: any[]) {\r\n    const body = format(...args)\r\n    const message =\r\n      ('# ' + body.split(/\\r?\\n/).join('\\n# ')).trim() + '\\n'\r\n    // it's almost impossible to send a message that will arrive\r\n    // AFTER the stdout closes, as this only happens when the worker\r\n    // thread closes, but it is theoretically possible, since messages\r\n    // are asynchronous.\r\n    /* c8 ignore start */\r\n    if (this.parser.results) {\r\n      if (this.parent && !this.parent.results) {\r\n        this.parent.parser.write(message)\r\n      } else {\r\n        console.log(message.trimEnd())\r\n      }\r\n    } else {\r\n      /* c8 ignore stop */\r\n      this.parser.write(message)\r\n    }\r\n  }\r\n\r\n  #onprocclose(code: number | null, signal: string | null) {\r\n    this.options.exitCode = this.options.exitCode || code\r\n    this.options.signal = this.options.signal || signal\r\n    if (this.#timedOut) super.timeout(this.#timedOut)\r\n    this.debug('SPAWN close %j %s', code, signal)\r\n\r\n    // spawn closing with no tests is treated as a skip.\r\n    if (\r\n      this.results &&\r\n      this.results.plan &&\r\n      this.results.plan.skipAll &&\r\n      !code &&\r\n      !signal\r\n    ) {\r\n      this.options.skip =\r\n        this.results.plan.skipReason || 'no tests found'\r\n    }\r\n\r\n    if (code || (signal && !(this.#childAskedToKill && signal === 'SIGKILL'))) {\r\n      if (this.results) {\r\n        this.results.ok = false\r\n      }\r\n      this.parser.ok = false\r\n    }\r\n    return this.#callCb()\r\n  }\r\n\r\n  timeout(options: { expired?: string } = { expired: this.name }) {\r\n    // defer calling super.timeout() until we actually kill the process.\r\n    this.#timedOut = options\r\n    // try to send the timeout signal.  If the child test process is\r\n    // using node-tap as the test runner, and not caught in a busy\r\n    // loop, it will trigger a dump of outstanding handles and refs.\r\n    // If that doesn't do the job, then we fall back to signals.\r\n    // Unfortunately, termination signals on windows cannot be caught,\r\n    // so this is the only way to get that information in most cases.\r\n    const proc = this.proc\r\n    if (proc) {\r\n      try {\r\n        proc.send(\r\n          {\r\n            tapAbort: 'timeout',\r\n            key: this.#childKey,\r\n            child: this.#childId,\r\n            // If the process ends while/before sending this message,\r\n            // then just ignore it. the eventual kills will be no-ops,\r\n            // and since we're done with this process, the success here\r\n            // doesn't matter.\r\n            /* c8 ignore start */\r\n          },\r\n          () => { },\r\n        )\r\n      } catch { }\r\n      /* c8 ignore stop */\r\n\r\n      // this whole bit has to be ignored because there is no way to test\r\n      // signals on Windows without mocking to the point of irrelevance\r\n      /* c8 ignore start */\r\n      const t = setTimeout(() => {\r\n        // try to give it a chance to note the timeout and report handles\r\n        try {\r\n          proc.kill('SIGALRM')\r\n        } catch (er) { }\r\n        const t = setTimeout(() => {\r\n          const { signal, exitCode } = this.options\r\n          if (!signal && exitCode === undefined) {\r\n            // that didn't work, use forceful termination\r\n            proc.kill('SIGKILL')\r\n          }\r\n        }, 500)\r\n        if (t.unref) t.unref()\r\n        proc.once('close', () => clearTimeout(t))\r\n      }, 500)\r\n      if (t.unref) t.unref()\r\n      proc.once('close', () => clearTimeout(t))\r\n      /* c8 ignore stop */\r\n    }\r\n  }\r\n\r\n  threw(er: any, extra?: Extra): Extra | void | undefined {\r\n    return throwToParser(this.parser, super.threw(er, extra))\r\n  }\r\n\r\n  static procName(cwd: string, command: string, args: string[]) {\r\n    return (\r\n      command === process.execPath ?\r\n        basename(process.execPath) +\r\n        ' ' +\r\n        args\r\n          .map(a =>\r\n            a.indexOf(cwd) === 0 ?\r\n              './' + a.substring(cwd.length + 1).replace(/\\\\/g, '/')\r\n              : a,\r\n          )\r\n          .join(' ')\r\n          .trim()\r\n        : command + ' ' + args.join(' ')).replace(/\\\\/g, '/')\r\n  }\r\n}\r\n"]}