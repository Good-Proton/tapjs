{"version":3,"file":"minimal.js","sourceRoot":"","sources":["../../src/minimal.ts"],"names":[],"mappings":";;;AAAA,6DAA8D;AAC9D,iDAIuB;AAEvB;;;;;;;;;;;;GAYG;AACH,MAAa,OAAQ,SAAQ,uBAAQ;IACnC,YAAY,IAAkB;QAC5B,KAAK,CAAC,IAAI,CAAC,CAAA;QACX,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;IAC1C,CAAC;IAkBD,IAAI,CACF,GAAG,IAAqC;QAExC,MAAM,KAAK,GAAG,IAAA,kCAAa,EAAwB,GAAG,IAAI,CAAC,CAAA;QAC3D,OAAO,IAAI,CAAC,GAAG,CACb,OAAO,EACP,KAAK,EACL,IAAI,CAAC,IAAI,CACqB,CAAA;IAClC,CAAC;CACF;AAhCD,0BAgCC","sourcesContent":["import { parseTestArgs, TestArgs } from './parse-test-args.js'\r\nimport {\r\n  PromiseWithSubtest,\r\n  TestBase,\r\n  TestBaseOpts,\r\n} from './test-base.js'\r\n\r\n/**\r\n * A very minimal Test class with no plugins, which can be used in tap tests.\r\n *\r\n * It is essentially just the TestBase class, but automatically starting in the\r\n * constructor, and with a .test() method so that it can be used somewhat like\r\n * a \"normal\" Test instance.\r\n *\r\n * The reason that this method does not live on TestBase itself is that it\r\n * would make it more awkward to define on the Test class, with all its plugins\r\n * and extensions.\r\n *\r\n * Only useful if you want a Test without any plugins, for some reason.\r\n */\r\nexport class Minimal extends TestBase {\r\n  constructor(opts: TestBaseOpts) {\r\n    super(opts)\r\n    if (!this.parent) this.runMain(() => {})\r\n  }\r\n  /**\r\n   * Spawn a subtest that is also a {@link @tapjs/core!minimal.Minimal}\r\n   */\r\n  test(\r\n    name: string,\r\n    extra: TestBaseOpts,\r\n    cb: (t: Minimal) => any,\r\n  ): PromiseWithSubtest<Minimal>\r\n  test(\r\n    name: string,\r\n    cb: (t: Minimal) => any,\r\n  ): PromiseWithSubtest<Minimal>\r\n  test(\r\n    extra: TestBaseOpts,\r\n    cb: (t: Minimal) => any,\r\n  ): PromiseWithSubtest<Minimal>\r\n  test(cb: (t: Minimal) => any): PromiseWithSubtest<Minimal>\r\n  test(\r\n    ...args: TestArgs<Minimal, TestBaseOpts>\r\n  ): PromiseWithSubtest<Minimal> {\r\n    const extra = parseTestArgs<Minimal, TestBaseOpts>(...args)\r\n    return this.sub(\r\n      Minimal,\r\n      extra,\r\n      this.test,\r\n    ) as PromiseWithSubtest<Minimal>\r\n  }\r\n}\r\n"]}